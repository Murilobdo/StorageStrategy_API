<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/StorageStrategy.Domain/Commands/UpdateClientCommand.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/StorageStrategy.Domain/Commands/UpdateClientCommand.cs" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="using StorageStrategy.Models;&#10;using MediatR;&#10;&#10;namespace StorageStrategy.Domain.Commands&#10;{&#10;    public class UpdateClientCommand : IRequest&lt;Result&gt;&#10;    {&#10;        public int Id { get; set; }&#10;        public int CompanyId { get; set; }&#10;        public string Name { get; set; }&#10;        public bool Active { get; set; }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/StorageStrategy.Domain/Handlers/ClientHandler.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/StorageStrategy.Domain/Handlers/ClientHandler.cs" />
              <option name="originalContent" value="using MediatR;&#10;using StorageStrategy.Domain.Commands.Client;&#10;using StorageStrategy.Domain.Repository;&#10;using StorageStrategy.Models;&#10;using StorageStrategy.Models.ViewModels.Client;&#10;&#10;namespace StorageStrategy.Domain.Handlers;&#10;&#10;public class ClientHandler : HandlerBase,&#10;    IRequestHandler&lt;CreateClientCommand, Result&gt;,&#10;    IRequestHandler&lt;GetClientsTotalCommandQuery, Result&gt;&#10;{&#10;    private IClientRepository _repo;&#10;    public ClientHandler(IClientRepository repo)&#10;    {&#10;        _repo = repo;&#10;    }&#10;    &#10;    public async Task&lt;Result&gt; Handle(CreateClientCommand request, CancellationToken cancellationToken)&#10;    {&#10;        request.Name = request.Name.ToUpper();&#10;        &#10;        var sameNameClient = await _repo.GetByNameAsync(request.CompanyId, request.Name);&#10;        if (sameNameClient is not null)&#10;            return CreateError(&quot;Cliente ja cadastrado com esse nome&quot;);&#10;&#10;        var client = new ClientEntity(request.CompanyId, request.Name);&#10;        client.Active = true;&#10;        await _repo.AddAsync(client);&#10;        await _repo.SaveAsync();&#10;        return CreateResponse(client, &quot;Cliente cadastrado&quot;);&#10;    }&#10;&#10;    public async Task&lt;Result&gt; Handle(GetClientsTotalCommandQuery request, CancellationToken cancellationToken)&#10;    {&#10;        var clients = new List&lt;ClientViewModel&gt;();&#10;        &#10;        var _clientsDb = await _repo.GetAllAsync(p =&gt; p.CompanyId == request.CompanyId);&#10;        &#10;        foreach (var client in _clientsDb)&#10;        {&#10;            clients.Add(new ClientViewModel&#10;            {&#10;                ClientId = client.ClientId,&#10;                Name = client.Name,&#10;                CreateAt = client.CreateAt,&#10;                Active = client.Active,&#10;                TotalCommands = await _repo.GetTotalCommandsAsync(client.ClientId),&#10;            });&#10;        }&#10;        &#10;        return CreateResponse(clients, &quot;Busca realizada&quot;);&#10;    }&#10;}&#10;&#10;&#10;" />
              <option name="updatedContent" value="using MediatR;&#10;using StorageStrategy.Domain.Commands.Client;&#10;using StorageStrategy.Domain.Repository;&#10;using StorageStrategy.Models;&#10;using StorageStrategy.Models.ViewModels.Client;&#10;&#10;namespace StorageStrategy.Domain.Handlers;&#10;&#10;public class ClientHandler : HandlerBase,&#10;    IRequestHandler&lt;CreateClientCommand, Result&gt;,&#10;    IRequestHandler&lt;GetClientsTotalCommandQuery, Result&gt;,&#10;    IRequestHandler&lt;UpdateClientCommand, Result&gt;&#10;{&#10;    private IClientRepository _repo;&#10;    public ClientHandler(IClientRepository repo)&#10;    {&#10;        _repo = repo;&#10;    }&#10;    &#10;    public async Task&lt;Result&gt; Handle(CreateClientCommand request, CancellationToken cancellationToken)&#10;    {&#10;        request.Name = request.Name.ToUpper();&#10;        &#10;        var sameNameClient = await _repo.GetByNameAsync(request.CompanyId, request.Name);&#10;        if (sameNameClient is not null)&#10;            return CreateError(&quot;Cliente ja cadastrado com esse nome&quot;);&#10;&#10;        var client = new ClientEntity(request.CompanyId, request.Name);&#10;        client.Active = true;&#10;        await _repo.AddAsync(client);&#10;        await _repo.SaveAsync();&#10;        return CreateResponse(client, &quot;Cliente cadastrado&quot;);&#10;    }&#10;&#10;    public async Task&lt;Result&gt; Handle(GetClientsTotalCommandQuery request, CancellationToken cancellationToken)&#10;    {&#10;        var clients = new List&lt;ClientViewModel&gt;();&#10;        &#10;        var _clientsDb = await _repo.GetAllAsync(p =&gt; p.CompanyId == request.CompanyId);&#10;        &#10;        foreach (var client in _clientsDb)&#10;        {&#10;            clients.Add(new ClientViewModel&#10;            {&#10;                ClientId = client.ClientId,&#10;                Name = client.Name,&#10;                CreateAt = client.CreateAt,&#10;                Active = client.Active,&#10;                TotalCommands = await _repo.GetTotalCommandsAsync(client.ClientId),&#10;            });&#10;        }&#10;        &#10;        return CreateResponse(clients, &quot;Busca realizada&quot;);&#10;    }&#10;&#10;    public async Task&lt;Result&gt; Handle(UpdateClientCommand request, CancellationToken cancellationToken)&#10;    {&#10;        request.Name = request.Name.ToUpper();&#10;&#10;        var client = await _repo.GetByIdAsync(request.Id);&#10;        if (client is null)&#10;            return CreateError(&quot;Cliente não encontrado&quot;);&#10;&#10;        var sameNameClient = await _repo.GetByNameAsync(request.CompanyId, request.Name);&#10;        if (sameNameClient is not null &amp;&amp; sameNameClient.ClientId != request.Id)&#10;            return CreateError(&quot;Cliente já cadastrado com esse nome&quot;);&#10;&#10;        client.Name = request.Name;&#10;        client.Active = request.Active;&#10;        await _repo.UpdateAsync(client);&#10;        await _repo.SaveAsync();&#10;        return CreateResponse(client, &quot;Cliente atualizado&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>